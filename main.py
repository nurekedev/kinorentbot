from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
import os

load_dotenv()
bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=bot)

folder_path = 'assets'
orderActive = False
packetName = ""

priceList = []
templateForm = ('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã (–ü—Ä–∏–º–µ—Ä):\n'
                '–í–≤–µ–¥–∏—Ç–µ: \n'
                '\t\t\t- –î–∞—Ç–∞,\n'
                '\t\t\t- –í—Ä–µ–º—è (–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?),\n'
                '\t\t\t- –ê–¥—Ä–µ—Å\n' 
                '\t\t\t- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n'
           
                '–û–±—Ä–∞–∑–µ—Ü: 10.07.23, 17:45, –ú–∞–º—ã—Ä-4, –¥–æ–º 302, –∫–≤ 41, 8(707)233-23-23)')


desclist = ["–ù–∞–±–æ—Ä ‚Äò–ë–∞–∑–æ–≤—ã–π‚Äô –∑–∞ 6 000‚Ç∏\n"
             "‚ö°Ô∏èHDMI –∫–∞–±–µ–ª—å\n"
             "‚ö°Ô∏è–®—Ç–∞—Ç–∏–≤ (1, 8 –º–µ—Ç—Ä)\n"
             "‚ö°Ô∏è–£–¥–ª–∏–Ω–∏—Ç–µ–ª—å (4 –º–µ—Ç—Ä)\n",


            "–ù–∞–±–æ—Ä ‚Äò–ë–∞–∑–æ–≤—ã–π + –≠–∫—Ä–∞–Ω ‚Äô –∑–∞ 9 000‚Ç∏\n"
            "‚ö°Ô∏èHDMI –∫–∞–±–µ–ª—å\n"
            "‚ö°Ô∏è–®—Ç–∞—Ç–∏–≤ (1, 8 –º–µ—Ç—Ä)\n"
            "‚ö°Ô∏è–£–∫–∞–∑–∫–∞ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å)\n"
            "‚ö°Ô∏è–£–¥–ª–∏–Ω–∏—Ç–µ–ª—å (4 –º–µ—Ç—Ä)\n"
            "‚ûï–ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω (2 —Ö 1,5 –º–µ—Ç—Ä)\n",

            "–ù–∞–±–æ—Ä ‚Äò–ü–æ–ª–Ω—ã–π ‚Äô –∑–∞ 12 000‚Ç∏\n"
            "‚ö°Ô∏èHDMI –∫–∞–±–µ–ª—å\n"
            "‚ö°Ô∏è–®—Ç–∞—Ç–∏–≤ (1, 8 –º–µ—Ç—Ä)\n"
            "‚ö°Ô∏è–£–∫–∞–∑–∫–∞ (–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å)\n"
            "‚ö°Ô∏è–£–¥–ª–∏–Ω–∏—Ç–µ–ª—å (4 –º–µ—Ç—Ä)\n"
            "‚ûï–ü—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω (2 —Ö 1,5 –º–µ—Ç—Ä)\n"
            "üé∂ –ö–æ–ª–æ–Ω–∫–∞ LG xBoom (600–í—Ç)\n"
            "üé§ –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –ú–∏–∫—Ä–æ—Ñ–æ–Ω\n"]

# First level elements (MENU)
firstLevel = types.ReplyKeyboardMarkup(resize_keyboard=True)
firstLevel.add('üçø–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç–æ—Ä!').add('‚òéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫').add('ü™©–ú—ã –≤ Instagram')

# Second level [üçø–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç–æ—Ä!]
secondLevelOne = types.InlineKeyboardMarkup(row_width=1)
secondLevelOne.add(InlineKeyboardButton(text='–ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∑–∞ (6 000‚Ç∏)', callback_data='basic'),
                  InlineKeyboardButton(text='–ë–∞–∑–æ–≤—ã–π + –≠–∫—Ä–∞–Ω –∑–∞ (9 000‚Ç∏)', callback_data='prestige'),
                  InlineKeyboardButton(text='–ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞ (12 000‚Ç∏)', callback_data='full'),
                  InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='backmenu'))

# Fourth level [–ö–∞–∂–¥—ã–π –ü–∞–∫–µ—Ç]
fourthLevelOne = types.InlineKeyboardMarkup(row_width=1)
fourthLevelOne.add(InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å', callback_data='order'),
                  InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'))

# Second level ['‚òéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫']
secondLevelTwo = types.ReplyKeyboardMarkup(resize_keyboard=True)
secondLevelTwo.add(types.KeyboardButton('üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä', request_contact=True),
                   types.KeyboardButton('üîô–ù–∞–∑–∞–¥'))

# Second level [Button '–ù–∞–∑–∞–¥']
secondLevelTwoInline = types.InlineKeyboardMarkup()
secondLevelTwoInline.add(types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='outremoveback'))

# Second level [ü™©–ú—ã –≤ Instagram]
secondLevelThree = types.InlineKeyboardMarkup(row_width=1)
secondLevelThree.add(InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ Instagram', url='https://www.instagram.com/kinorent.kz/'))

# Deleting last
additionalBack = InlineKeyboardMarkup(row_width=1)
additionalBack.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='additionalBack'))

# Show map
mapDetails = InlineKeyboardMarkup(row_width=1)
mapDetails.add(InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É", callback_data='shmap'))

# Menu [/start]
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é", reply_markup=firstLevel)

# Menu [/rent]
@dp.message_handler(text='üçø–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç–æ—Ä!')
async def rent(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö ", reply_markup=secondLevelOne)

@dp.message_handler(text='üîô–ù–∞–∑–∞–¥')
async def goBack(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é", reply_markup=firstLevel)


@dp.message_handler(text='‚òéÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫')
async def order(message: types.Message):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=secondLevelTwo)


@dp.message_handler(text='ü™©–ú—ã –≤ Instagram')
async def rent(message: types.Message):
    await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ Instagram', reply_markup=secondLevelThree)

@dp.message_handler(content_types=types.ContentType.CONTACT)
async def process_contact(message: types.Message):
    phone_number = message.contact.phone_number
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ {message.from_user.first_name}! \n"
        f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω –∑–≤–æ–Ω–æ–∫. \n"
        f"–ù–æ–º–µ—Ä: {phone_number}", reply_markup=secondLevelTwoInline)

    await bot.forward_message(os.getenv('GROUP_ID'), message.from_user.id, message.message_id)


@dp.message_handler(content_types=types.ContentType.TEXT)
async def text_handler(message: types.Message):
    global orderActive


    await bot.forward_message(os.getenv('GROUP_ID'), message.from_user.id, message.message_id)


    if orderActive:
        fname = message.from_user.first_name
        await message.answer(
            f"\t{fname}, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "\t–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã\n"
            "–≤ —Ç–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã.\n\n"
            "\t–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–æ–Ω—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ \n",
            reply_markup=mapDetails)

        orderActive = False
    else:
        await message.answer("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é")

    await bot.send_message(os.getenv('GROUP_ID'), text=packetName)





@dp.callback_query_handler()
async def callbackFunctions(call: types.CallbackQuery):
    global priceList
    global desclist
    global templateForm
    global orderActive
    global packetName

    if call.data == 'basic':
        with open(f'./{folder_path}/classic.jpg', 'rb') as basicPrice:
            await bot.send_photo(chat_id=call.from_user.id, photo=basicPrice, caption=desclist[0], reply_markup=fourthLevelOne)
            packetName = "üü¢ –ó–∞–∫–∞–∑ –Ω–∞ –Ω–∞–±–æ—Ä 'Basic' - –ø—Ä–æ–µ–∫—Ç–æ—Ä —Å–æ —à—Ç–∞—Ç–∏–≤–æ–º"
    elif call.data == 'prestige':
        with open(f'./{folder_path}/prestige.jpg', 'rb') as prestigePrice:
            await bot.send_photo(chat_id=call.from_user.id, photo=prestigePrice, caption=desclist[1], reply_markup=fourthLevelOne)
            packetName = "üü° –ó–∞–∫–∞–∑ –Ω–∞ –Ω–∞–±–æ—Ä 'Prestige' - –ø—Ä–æ–µ–∫—Ç–æ—Ä c —ç–∫—Ä–∞–Ω–æ–º"
    elif call.data == 'full':
        with open(f'./{folder_path}/full.jpg', 'rb') as fullPrice:
            await bot.send_photo(chat_id=call.from_user.id, photo=fullPrice, caption=desclist[2],
                                 reply_markup=fourthLevelOne)
            packetName = "üî¥ –ó–∞–∫–∞–∑ –Ω–∞ –Ω–∞–±–æ—Ä 'Full' - –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä"
    elif call.data == 'shmap':
        with open(f'./{folder_path}/map.jpg', 'rb') as mapScreen:
            await bot.send_photo(chat_id=call.from_user.id, photo=mapScreen, caption="–ó–æ–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏")
    elif call.data == 'backmenu':
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text="–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é")
        await bot.delete_message(chat_id=call.from_user.id, message_id=(call.message.message_id))
    elif call.data == 'order':
        await bot.send_message(chat_id=call.from_user.id, text=templateForm, reply_markup=additionalBack)
        orderActive = True
    elif call.data == 'back' or 'additionalBack':
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        orderActive = False
    elif call.data == 'outremoveback':
        await bot.send_message(chat_id=call.from_user.id, text="–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω—é", reply_markup=firstLevel)

@dp.message_handler()
async def noidea(message: types.Message):
    await message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!')


if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
